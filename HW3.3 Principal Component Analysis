"""
Principle Component Analysis
Date:29.06.2019
Author:Yulian Sun
"""
import numpy as np
import matplotlib.pyplot as plt
f= np.loadtxt('../iris.txt', delimiter=',')
file=f[:,0:4]

class PCA:
    def __init__(self,D,N,file):
        self.D = D
        self.N = N
        self.file = file
        self.mu = file.mean(axis=0)
        self.std = file.std(axis=0)

    def data_normalization(self):
        norm_data = np.empty((self.N,self.D))
        norm_data =(self.file - self.mu)/self.std
        return norm_data

    def principle_component(self,normdata):
        n = len(normdata)
        cov = 1/n * normdata.T@normdata
        values ,vectors = np.linalg.eig(cov)
        #print(vectors)
        #index = np.argsort(-values)# from big to small
        per0 = values[0]/np.sum(values)
        per1 = (values[0]+values[1])/np.sum(values)
        per2 = (values[0]+values[1]+ values[2]) / np.sum(values)
        per3 = (values[0]+values[1]+ values[2]+values[3])/np.sum(values)
        per = [per0,per1,per2,per3]
        return per

N = file.shape[0]
D = file.shape[1]
pca = PCA(D,N,file)
norm_data = pca.data_normalization()
X = np.linspace(1,4,4)
Y = pca.principle_component(norm_data)
plt.plot(X,Y,'-')
plt.show()
#print(file)
